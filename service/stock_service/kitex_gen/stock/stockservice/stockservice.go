// Code generated by Kitex v0.12.3. DO NOT EDIT.

package stockservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	stock "seckill/service/stock_service/kitex_gen/stock"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"QueryStock": kitex.NewMethodInfo(
		queryStockHandler,
		newStockServiceQueryStockArgs,
		newStockServiceQueryStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ProDeductStock": kitex.NewMethodInfo(
		proDeductStockHandler,
		newStockServiceProDeductStockArgs,
		newStockServiceProDeductStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RollCallBackStock": kitex.NewMethodInfo(
		rollCallBackStockHandler,
		newStockServiceRollCallBackStockArgs,
		newStockServiceRollCallBackStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	stockServiceServiceInfo                = NewServiceInfo()
	stockServiceServiceInfoForClient       = NewServiceInfoForClient()
	stockServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return stockServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return stockServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return stockServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StockService"
	handlerType := (*stock.StockService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "stock",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func queryStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stock.StockServiceQueryStockArgs)
	realResult := result.(*stock.StockServiceQueryStockResult)
	success, err := handler.(stock.StockService).QueryStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStockServiceQueryStockArgs() interface{} {
	return stock.NewStockServiceQueryStockArgs()
}

func newStockServiceQueryStockResult() interface{} {
	return stock.NewStockServiceQueryStockResult()
}

func proDeductStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stock.StockServiceProDeductStockArgs)
	realResult := result.(*stock.StockServiceProDeductStockResult)
	success, err := handler.(stock.StockService).ProDeductStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStockServiceProDeductStockArgs() interface{} {
	return stock.NewStockServiceProDeductStockArgs()
}

func newStockServiceProDeductStockResult() interface{} {
	return stock.NewStockServiceProDeductStockResult()
}

func rollCallBackStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stock.StockServiceRollCallBackStockArgs)
	realResult := result.(*stock.StockServiceRollCallBackStockResult)
	success, err := handler.(stock.StockService).RollCallBackStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStockServiceRollCallBackStockArgs() interface{} {
	return stock.NewStockServiceRollCallBackStockArgs()
}

func newStockServiceRollCallBackStockResult() interface{} {
	return stock.NewStockServiceRollCallBackStockResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryStock(ctx context.Context, req *stock.StockReq) (r *stock.StockResp, err error) {
	var _args stock.StockServiceQueryStockArgs
	_args.Req = req
	var _result stock.StockServiceQueryStockResult
	if err = p.c.Call(ctx, "QueryStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProDeductStock(ctx context.Context, req *stock.StockReq) (r *stock.StockResp, err error) {
	var _args stock.StockServiceProDeductStockArgs
	_args.Req = req
	var _result stock.StockServiceProDeductStockResult
	if err = p.c.Call(ctx, "ProDeductStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RollCallBackStock(ctx context.Context, req *stock.StockReq) (r *stock.StockResp, err error) {
	var _args stock.StockServiceRollCallBackStockArgs
	_args.Req = req
	var _result stock.StockServiceRollCallBackStockResult
	if err = p.c.Call(ctx, "RollCallBackStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
